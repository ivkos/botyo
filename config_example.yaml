# Facebook account credentials
account:
  email: FACEBOOK_EMAIL
  password: FACEBOOK_PASSWORD

mongo:
  url: "mongodb://mongo:27017/botyo"

# Threads to listen to
threads:
  - 162123511236172
  - 192123512310277:  # thread id
    aliases:
      - 4:            # facebook id of person
        - zuck
        - mark
        - zuckerberg
      - 5:
        - chris
        - hughes

app:
  stateFile: /data/app/appstate.json  # where to save the state of the Facebook chat API
  bannerFile: banner.txt              # file contents to print after listening has started
  commandEscape: "#"                  # character all commands to the bot should be preceded with (e.g. #ping)
  selfListen: false                   # whether the bot should listen to and handle its own sent messages; beware of infinite loops!

# List of filters each message gets passed through. Filters are applied in the order they are listed here.
# Not listing a filter here disables it by not passing messages through it
filter-chain:
  - ThreadFilter             # checks if message is coming from a thread the bot is listening to
  - TrimmingFilter           # trims message's body
  - MessageDownloaderFilter  # saves a copy of each received message in the database
  - CommandExecutorFilter    # parses each message for commands and executes them
  - AutoEmojifyFilter        # scans for emojifiable parts (e.g. "E X A M P L E"), emojifies them, and responds
  - HeIsRisenFilter          # says "<name> is risen!" if a person hasn't sent messages in a while (see config below)

modules:
  commands:
    # Returns the text aestheticized
    AestheticCommand:
      enable: true

    # Changes the chat color
    ColorCommand:
      enable: true

    # Returns the text emojified
    EmojifyCommand:
      enable: true

    # Instagram integration
    InstagramCommand:
      enable: false
      username: YOUR_INSTAGRAM_USERNAME
      password: YOUR_INSTAGRAM_PASSWORD

    # Googles that for you
    LmgtfyCommand:
      enable: true

    # Makes the bot respond to pings
    PingCommand:
      enable: true

    # Generates a quote using Markov chains based on messages in the chat
    # Note: QuoteCommand uses messages cached in the database,
    #       so ThreadHistoryDownloader must be enabled for QuoteCommand to work correctly.
    QuoteCommand:
      enable: true
      maxMarkovSentenceWordCount: 20   # limit for the generated sentence's word count
      markovModelOrder: 2              # order of the Markov model
      markovBuildVom: false            # whether to build a variable-order Markov model
      censorship: false                # whether to censor (i.e. not send) sentences matching the following regex, and generate new ones instead
      censorshipRegex: "/badword|worseword/gi"      # JavaScript regex

    # Returns the first few images found in Google Images matching the query
    ShowMeCommand:
      enable: false
      defaultImageCount: 1              # how many images to return
      maxImageCount: 10                 # max number of images to return
      cseId: CSE_ID                     # info how to obtain these:
      cseApiKey: CSE_API_KEY            # https://github.com/vdemedes/google-images

    # Posts a Spotify track in the chat
    SpotifyCommand:
      enable: true
      market: US   # An ISO 3166-1 alpha-2 country code. Only tracks playable in that market will be returned.
      clientId: '38b0835bd51c4259a6fda983226fb4e9'
      clientSecret: '077191fcf2c54776bc36a139053671c6'

    # Returns some stats for the chat
    StatsCommand:
      enable: true

    # Translates text
    TranslateCommand:
      enable: true
      defaultToLanguage: en             # default language to translate into if none is specified

    # Runs a reverse image search on the last picture in the chat
    WhoDisCommand:
      enable: true
      recentMessagesCount: 50           # how many recent messages to search for photos

    # Posts a YouTube video in the chat
    YouTubeCommand:
      enable: false
      regionCode: US                    # Return search results for the specified country. (ISO 3166-1 alpha-2 country code)
      order: relevance                  # Method to use to order videos: date/rating/relevance/title/viewCount
      safeSearch: moderate              # Whether the search results should include restricted content as well as standard content: moderate/none/strict
      apiKey: YOUR_YOUTUBE_API_KEY      # https://developers.google.com/youtube/v3/docs/#calling-the-api


  filters:
    # Replies "<name> is risen!" when a person on the watch list
    # sends a message for the first time in the last 'timeLimit' minutes or 'msgLimit' messages
    HeIsRisenFilter:
      timeLimit: 1080                   # how long the user must have been inactive (in minutes)
      msgLimit: 200                     # how many messages to look back on for the user
      watchEveryone: true               # whether to watch everyone in the chat
      watchList:                        # list of ids of people to watch; ignored if watchEveryone is true
        - USER_ID_1
        - USER_ID_2

  scheduled-tasks:
    # Checks for message requests and accepts them if they are coming from threadIds the bot is listening to
    MessageRequestAcceptor:
      enable: true
      executeOnStart: true
      interval: 300000      # 5 min * 60 s * 1000 ms

    # Downloads the chat history and saves it into the database
    # Note: QuoteCommand uses messages cached in the database,
    #       so ThreadHistoryDownloader must be enabled for QuoteCommand to work correctly.
    # This scheduled task needn't run as often if MessageDownloadFilter is enabled
    ThreadHistoryDownloader:
      enable: true
      executeOnStart: true
      interval: 10800000      # 3 h * 60 min * 60 s * 1000 ms

    # Updates the aliases for the participants in the chat room
    ThreadParticipantsUpdater:
      enable: true
      executeOnStart: true
      interval: 300000       # 5 min * 60 s * 1000 ms


misc:
  googlApiKey: YOUR_GOOGL_API_KEY   # https://developers.google.com/url-shortener/v1/getting_started?csw=1#APIKey